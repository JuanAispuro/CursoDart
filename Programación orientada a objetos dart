-- Clases --
Clases elementos que generaran nuestros objetos.
void main() {
  int numero = 10;

  //cadena
  String cadena = "numero";
  bool verdad = true;
  //Concatenacion
  //El .Tostring convierte numero a cadena.
  print(cadena + numero.toString() + verdad.toString());
}
class Objeto{
  //Propiedades
  //ej. color, tamano, etc.
  //metodos
  //mostrar, crear, etc.
}

-- Constructores --
void main() {
  //Llamamos al constructor
  Persona persona1 = Persona(nombre: "Juan", edad: 21);
  persona1.mostrar();

  Persona persona2 = Persona.soloNombre("Valeria");
  Persona persona3 = Persona.soloEdad(22);

  persona2.mostrar();
  persona3.mostrar();
}

class Persona {
  //Pedirle ayuda al leo o al fierro, por que si lo pongo pelon no jala.
  String nombre = "";
  int edad = 0;
  //Constructor
  Persona({this.nombre, this.edad});
  //Con factory creamos un nuevo constructor
  factory Persona.soloNombre(String x) {
    return Persona(
      nombre: x,
    );
  }
  //Tambien se pone de manera especifica.
  factory Persona.soloEdad(int y) {
    return Persona(edad: y);
  }

  void mostrar() {
    print(nombre);
    print(edad);
  }
}

-- Getters y Setters --
Instanciar clases en otros archivos.
Los getters y setters son para obtener las variables de las privadas.

-- Herencia -- 
Utilizar la clase padre y darselas a las hijo
Solo se puede heredar solo una clase, pero las propiedades si.


-- Interfaces --
Conocida como herencia multiple o capa de abstraccion.
La clase abstracta hace referencia a la clase, pero no se pueden instanciar.
(implements)

-- Mixins --
Permite usar las propiedades de las clases obtenidas (with).